version: "3"

services:
  redis:
    container_name: redis
    build: ./redis
    ports:
      - "6377:6379"
    volumes:
      - ./redis/redis-data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    healthcheck:
      test: exit 0

  workspace-db:
    container_name: workspace-db
    build: ./workspace-db
    ports:
      - "5438:5432"
    volumes:
      - ./workspace-db/pg-data:/var/lib/postgresql/data
    environment:
      - POSTGRESQL_USER=${POSTGRESQL_USER}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
    healthcheck:
      test: exit 0

  message-db:
    container_name: message-db
    build: ./message-db
    ports:
      - "27017:27017"
    volumes:
      - ./message-db/mongo-data:/data/db
    environment:
      - MONGODB_USER=${MONGODB_USER}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
    healthcheck:
      test: exit 0

  workspace-service:
    container_name: workspace-service
    build: ./workspace-service
    ports:
      - "3000:3000"
    volumes:
      - "./workspace-service:/usr/src/app"
      - "./workspace-service/package.json:/usr/src/package.json"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@workspace-db:5432/workspace_dev
      - DATABASE_TEST_URL=postgres://postgres:postgres@workspace-db:5432/workspace_test
      - NODE_ENV=${NODE_ENV}
      - TOKEN_SECRET=${TOKEN_SECRET}
      - TOKEN_SECRET_2=${TOKEN_SECRET_2}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      - workspace-db
      - redis
    links:
      - workspace-db
      - redis

  message-service:
    container_name: message-service
    build: ./message-service
    ports:
      - "3000:3000"
    volumes:
      - "./message-service:/usr/src/app"
      - "./message-service/package.json:/usr/src/package.json"
    environment:
      - DATABASE_URL=mongo://partners-db:27017/message_dev
      - DATABASE_TEST_URL=mongo://partners-db:27017/message_test
      - NODE_ENV=${NODE_ENV}
      - TOKEN_SECRET=${TOKEN_SECRET}
      - TOKEN_SECRET_2=${TOKEN_SECRET_2}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      - message-db
      - redis
    links:
      - message-db
      - redis

  call-service:
    container_name: call-service
    build: ./call-service
    ports:
      - "3000:3000"
    volumes:
      - "./call-service:/usr/src/app"
      - "./call-service/package.json:/usr/src/package.json"
    environment:
      - NODE_ENV=${NODE_ENV}
      - TOKEN_SECRET=${TOKEN_SECRET}
      - TOKEN_SECRET_2=${TOKEN_SECRET_2}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      - redis
    links:
      - redis

  file-service:
    container_name: file-service
    build: ./file-service
    ports:
      - "5000:5000"
    volumes:
      - "./file-service:/usr/src/app"
      - "./file-service/requirements.txt:/usr/src/requirements.txt"
    environment:
      - NODE_ENV=${NODE_ENV}
      - TOKEN_SECRET=${TOKEN_SECRET}
      - TOKEN_SECRET_2=${TOKEN_SECRET_2}

  nginx:
    container_name: nginx
    build: ./nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - "./nginx:/etc/nginx/conf.d"
      - "./certbot/conf:/etc/letsencrypt"
      - "./certbot/www:/var/www/certbot"
      - "./file-service/app/static:/files"
    depends_on:
      - workspace-service
      - message-service
      - call-service
      - file-service
    restart: always
    healthcheck:
      test: exit 0
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx \
      -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    container_name: certbot
    build: ./certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - nginx
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; \
      do certbot renew; sleep 12h & wait $${!}; done;'"
